/**
 * This program reads a list of triangles from an STL file; STLs have no imposed structure (Boo!).
 * 
 * It attempts to stitch them together to form shells of triangles where each triangle has
 * three corners in space and opposite them three sides.  Each side connects to another triangle 
 * in the shell.
 * 
 * A certain amount of checking for integrity and solidity is done.
 * 
 * There are a number of TODOs.  These mainly relate to imposing a logarithmic spatial structure
 * such as a BSP tree on the whole problem, which would obviously make spatial searching much more efficient.
 * 
 */

/**
 * @author Adrian Bowyer
 * 
 * RepRap Ltd
 * https://reprapltd.com
 * 
 * Date: about 24 October 2018
 * 
 * Licence: GPL
 *
 */

package com.reprapltd.triangulator;

import java.util.ArrayList;
import org.j3d.renderer.java3d.loaders.STLLoader;
import javax.vecmath.Point3d;

public class Triangulator 
{
	/**
	 * This is the enclosing class that constructs and maintains the entire triangulation.
	 * 
	 * The triangulation consists of one or more shells.  These are accessed by a single triangle
	 * that is a part of each shell stored in the list meshes.  Given one triangle, every triangle
	 * in a shell can be visited by a recursive neighbour graph walk.
	 */
	
	private CornerList cornerList = new CornerList();
	private double smallD2 = 0.001;
	private ArrayList<Triangle> shells = new ArrayList<Triangle>();
	
	private void Error(String s)
	{
		
	}
	
	
	public class CornerList
	{
		/**
		 * This class stores the list of vertices/corners of all the triangles as points in space.  Each
		 * point will have a ring of triangles around it.  The points all have one arbitrary triangle
		 * stored alongside them (from which the ring can be derived by a local search).
		 */
		
		private ArrayList<Point3d> corners = new ArrayList<Point3d>();
		private ArrayList<Triangle> triangles = new ArrayList<Triangle>();
		
		/**
		 * Add a triangle corner to the list, together with any
		 * triangle that has that corner.  It returns the index of
		 * the corner.
		 * 
		 * @param corner
		 * @param triangle
		 * @return
		 */
		public int AddCorner(Point3d corner, Triangle triangle)
		{
			corners.add(corner);
			triangles.add(triangle);
			return corners.size() - 1;
		}
		
		public Point3d GetCorner(int i)
		{
			return corners.get(i);
		}
		
		public Triangle GetTriangle(int i)
		{
			return triangles.get(i);
		}
		
		/**
		 * Sanity check.
		 * @return
		 */
		public boolean Sane()
		{
			return corners.size() == triangles.size();
		}
		
		/**
		 * This finds the point in the list corresponding to target and
		 * returns its index.  Any point with squared distance to target
		 * less than or equal to smallD2 is considered a match.  If no such 
		 * point is found -1 is returned.
		 * 
		 * TODO: Obviously this should not do an exhaustive search; it
		 * should use a spatial structure (BSP tree?).
		 * 
		 * @param target
		 * @return
		 */
		public int Find(Point3d target)
		{
			for(int i = 0; i < corners.size(); i++)
			{
				if(corners.get(i).distanceSquared(target) <= smallD2)
					return i;
			}
			return -1;
		}
		
		/**
		 * This finds the triangle in the lists that shares the edge corner1-corner2 with notThisOne.
		 * 
		 * TODO: Again obviously this should not do an exhaustive search, but should use spatial structure.
		 * 
		 * @param corner0
		 * @param corner1
		 * @param extraTriangles
		 * @param notThisOne
		 * @return
		 */
		private Triangle FindTriangleWithEdge(int corner0, int corner1, ArrayList<Triangle> extraTriangles, Triangle notThisOne)
		{	
			for(int i = 0; i < triangles.size(); i++)
			{
				Triangle t = triangles.get(i);
				if(t != notThisOne)
					if(t.HasCorners(corner0, corner1))
						return t;
			}
			
			for(int i = 0; i < extraTriangles.size(); i++)
			{
				Triangle t = extraTriangles.get(i);
				if(t != notThisOne)
					if(t.HasCorners(corner0, corner1))
						return t;
			}
			
			return null;
		}
		
		/**
		 * Run round the three edges of a triangle finding its neighbours that share that edge
		 * and record the neighbour relationship.
		 * 
		 * TODO: AGAIN obviously this should set the neighbour relationship for both triangles at once.
		 * 
		 * @param t
		 * @param extraTriangles
		 * @return
		 */
		
		public boolean StitchUpThisTriangle(Triangle t, ArrayList<Triangle> extraTriangles)
		{
			boolean result = true;
			
			for(int j = 0; j < 3; j++)
			{
				int j1 = (j+1)%3;
				int corner1 = t.GetCorner(j);
				int corner2 = t.GetCorner(j1);
				Triangle neighbour = FindTriangleWithEdge(corner1, corner2, extraTriangles, t);
				if(neighbour == null)
				{
					Error("StitchUp() - triangle with missing neighbour found.");
					result = false;
				}
				t.SetEdge(neighbour, 3 - (j + j1));
			}
			
			return result;
		}
		
		public boolean StitchUp(ArrayList<Triangle> extraTriangles)
		{
			boolean result = true;
			
			for(int i = 0; i < triangles.size(); i++)
			{
				Triangle t = triangles.get(i);
				if(!StitchUpThisTriangle(t, extraTriangles))
					result = false;	
			}
			
			for(int i = 0; i < extraTriangles.size(); i++)
			{
				Triangle t = extraTriangles.get(i);
				if(!StitchUpThisTriangle(t, extraTriangles))
					result = false;	
			}
			
			return result;
		}
	}
	
	public class Triangle 
	{

		/**
		 * This holds the representation of a single triangle.  A triangle
		 * has corners and, opposite them, neighbouring triangles.  Each neighbour is the adjacent triangle
		 * in the mesh.  For a complete mesh no neighbours should be null.  The corners
		 * are stored as indices into cornerList, where the actual point coordinates
		 * in space are kept.
		 */
		
		private int corners[];
		private Triangle neighbours[];
		
		/**
		 * visited is a flag to facilitate recursively walking over the mesh
		 */
		
		private boolean visited;
		
		private Triangle()
		{
			visited = false;
			corners = new int[3];
			neighbours = new Triangle[3];
			for(int i = 0; i < 3; i++)
			{
				corners[i] = -1;
				neighbours[i] = null;
			}
		}
		
		/**
		 * Constructor to make a triangle from three points in space.
		 * 
		 * If visited is true on return, the new triangle is also in
		 * the corner list and visited should be reset to false.  If it is false
		 * it is not in the corner list (because all three of its corners
		 * were put in the list by previous triangles).
		 * 
		 * @param aC
		 * @param bC
		 * @param cC
		 */
		
		public Triangle(Point3d aC, Point3d bC, Point3d cC) 
		{
			this();
			
			int c = cornerList.Find(aC);
			if(c < 0)
			{
				c = cornerList.AddCorner(aC,  this);
				visited = true;
			}
			corners[0] = c;
			
			c = cornerList.Find(bC);
			if(c < 0)
			{
				c = cornerList.AddCorner(bC,  this);
				visited = true;
			}
			corners[1] = c;
			
			c = cornerList.Find(cC);
			if(c < 0)
			{
				c = cornerList.AddCorner(cC,  this);
				visited = true;
			}
			corners[2] = c;
		}
		
		public void ResetVisited()
		{
			visited = false;
		}
		
		public void MarkVisited()
		{
			visited = true;
		}
		
		public boolean Visited()
		{
			return visited;
		}
		
		public int GetCorner(int i)
		{
			return corners[i];
		}
		
		public Triangle GetNeighbour(int i)
		{
			return neighbours[i];
		}
		
		
		/**
		 * Reset all the triangles in one shell to unvisited, starting with this one.
		 * Note this works with partial triangulations with null edges as long as they
		 * are not disjoint.
		 */
		
		public void Reset()
		{
			ResetVisited();
			for(int i = 0; i < 3; i++)
			{
				if(neighbours[i] != null)
					if(neighbours[i].Visited())
						neighbours[i].Reset();
			}
		}
		
		/**
		 * The vector product of corners ([1] - [0])x([2] - [0]) faces
		 * outward from solid to air.  This inverts a triangle that has 
		 * the wrong sense. 
		 */
		
		public void Invert()
		{
			int cTemp = corners[2];
			corners[2] = corners[1];
			corners[1] = cTemp;
			Triangle eTemp = neighbours[2];
			neighbours[2] = neighbours[1];
			neighbours[1] = eTemp;
		}
		
		public void SetEdge(Triangle e, int i)
		{
			neighbours[i] = e;
		}
		
		public boolean HasCorner(int corner)
		{
			for(int i = 0; i < 3; i++)
			{
				if(corners[i] == corner)
					return true;
			}		
			return false;
		}		
		
		public boolean HasCorners(int corner1, int corner2)
		{
			return HasCorner(corner1) && HasCorner(corner2);
		}
	
	}


	/**
	 * 
	 */
	public Triangulator() 
	{
		
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) 
	{
		

	}

}
