//============================================================================
// Name        : Painter.cpp
// Author      : Adrian Bowyer
// Version     :
// Copyright   : GPL
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
using namespace std;

////////////////////////////////////////////////////////////////////////
//
// hello-world.cpp
//
// This is a simple, introductory OpenCV program. The program reads an
// image from a file, inverts it, and displays the result.
//
////////////////////////////////////////////////////////////////////////
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <algorithm>
#include <cv.h>
#include <highgui.h>

static int frameCount = 0;

void showResult(IplImage* img)
{
	  cvNamedWindow("mainWin", CV_WINDOW_AUTOSIZE);
	  cvMoveWindow("mainWin", 100, 100);

	  // show the image
	  cvShowImage("mainWin", img );

	  // wait for a key
	  cvWaitKey(0);

	  // release the image
	  cvReleaseImage(&img );
	frameCount++;
}


double Percentile(double array[], double percentile, int length)
{
	std::sort(array, array+length);
	return array[round(((double)length*percentile))];
}

double Percentile(IplImage* img, double percentile)
{
	int count = 0;
	int pixelCount = img->width*img->height;
	double array[] = new double[pixelCount];
	for(int i = 0; i < img->width; i++)
		for(int j = 0; j < img->height; j++)
		{
			double pixel[] = img->get(j, i);
			//double magnitude = Math.sqrt(pixel[0]*pixel[0] + pixel[1]*pixel[1] + pixel[2]*pixel[2]);
			array[count] = pixel[0];
			count++;
		}
	return Percentile(array, percentile, pixelCount);
}



int main(int argc, char *argv[])
{
  IplImage* img = 0;
  int height,width,step,channels;
  uchar *data;
  int i,j,k;

  if(argc<2){
    printf("Usage: main <image-file-name>\n");
    exit(0);
  }

  // load an image
  img=cvLoadImage(argv[1]);

  if(!img){
    printf("Could not load image file: %s\n",argv[1]);
    exit(0);
  }

  // get the image data
  height    = img->height;
  width     = img->width;
  step      = img->widthStep;
  channels  = img->nChannels;
  data      = (uchar *)img->imageData;
  printf("Processing a %dx%d image with %d channels\n",height,width,channels);

  // create a window
  cvNamedWindow("mainWin", CV_WINDOW_AUTOSIZE);
  cvMoveWindow("mainWin", 100, 100);

  // invert the image
  for(i=0;i<height;i++) for(j=0;j<width;j++) for(k=0;k<channels;k++)
    data[i*step+j*channels+k] = ~data[i*step+j*channels+k];

  // show the image
  cvShowImage("mainWin", img );

  // wait for a key
  cvWaitKey(0);

  // release the image
  cvReleaseImage(&img );
  return 0;

}
