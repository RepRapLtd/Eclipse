//============================================================================
// Name        : Painter.cpp
// Author      : Adrian Bowyer
// Version     :
// Copyright   : GPL
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
using namespace std;

////////////////////////////////////////////////////////////////////////
//
// hello-world.cpp
//
// This is a simple, introductory OpenCV program. The program reads an
// image from a file, inverts it, and displays the result.
//
////////////////////////////////////////////////////////////////////////
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <algorithm>

#include "Painter.h"

void Painter::ShowResult(Mat img)
{
	  cvNamedWindow("mainWin", CV_WINDOW_AUTOSIZE);
	  cvMoveWindow("mainWin", 100, 100);

	  IplImage* image=cvCloneImage(&(IplImage)img);
	  // show the image
	  cvShowImage("mainWin", image );

	  // wait for a key
	  cvWaitKey(0);

	  // release the image
	  //cvReleaseImage(&img );
	frameCount++;
}

uchar Painter::Percentile(uchar array[], double percentile, int length)
{
	std::sort(array, array+length);
	return array[(int)round(length*percentile)];
}

uchar Painter::Percentile(Mat img, double percentile)
{
	int count = 0;
	for(int i = 0; i < imageWidth; i++)
		for(int j = 0; j < imageHeight; j++)
		{
			pixelsAsList[count] = GetPixelMono(img, i, j);
			count++;
		}
	return Percentile(pixelsAsList, percentile, pixelCount);
}

void Painter::GoWhite(Mat img)
{
	uchar data[3];
	data[0] = 255;
	data[1] = 255;
	data[2] = 255;
	for(int i = 0; i < imageWidth; i++)
		for(int j = 0; j < imageHeight; j++)
			PutPixel(img, j, i, data);
}


void Painter::Threshold(Mat image, double percentile)
{
	Imgproc.threshold(image, image, Percentile(image, percentile), 255.0, 0);
}


void Painter::Blob(Mat image, Point pixel, uchar colour[], double d)
{
	double r2 = d*d/4;
	for(int y = 0; y < round(d/2); y++)
	{
		int xm = round(sqrt(r2 - y*y));
		for(int x = 0; x < xm; x++)
		{
			int px = round(pixel.x);
			int py = round(pixel.y);
			PutPixel(image, py + y, px + x, colour);
			PutPixel(image, py + y, px - x, colour);
			PutPixel(image, py - y, px + x, colour);
			PutPixel(image, py - y, px - x, colour);
		}
	}
}

void Painter::Stroke(Mat image, Point pixels[], int count, uchar colour[], double d)
{
	for(int i = 0; i < count; i++)
		Blob(image, pixels[i], colour, d);
}

uint Painter::PixelDifference2(uchar a[], uchar b[])
{
	uint result = 0;
	for(int k = 0; k < 3; k++)
	{
		int diff = a[k] - b[k];
		result += diff*diff;
	}
	return result;
}

uchar Painter::PixelDifference(uchar a[], uchar b[])
{
	double d2 = PixelDifference2(a, b);
	d2 = sqrt(d2)*255.0/441.67295593;
	return (uchar)d2;
}

void Painter::ImageDifference(Mat a, Mat b)
{
	uchar dataA[3];
	uchar dataB[3];
	uchar pixel;
	for(int i = 0; i < imageWidth; i++)
		for(int j = 0; j < imageHeight; j++)
		{
			GetPixel(a, j, i, dataA);
			GetPixel(b, j, i, dataB);
			pixel = PixelDifference(dataA, dataB);
			PutPixelMono(difference, j, i, pixel);
		}
}

Painter::Painter(const Mat org)
{

	double blob = original.width()/30;
	double threshold = 0.7;
	double brushReduction = 0.7;

	Mat painting = new Mat();
	original.copyTo(painting); // Deep
	GoWhite(painting);

	int strokes = 0;
	boolean keepGoing = true;

	Mat result = new Mat();

	//Mat rCopy = new Mat();
	MatOfPoint biggest;
	double[] average = new double[3];
	List<MatOfPoint> contours = new ArrayList<MatOfPoint>();
	Mat hierarchy = new Mat();

	Mat d;
	Mat kernel;
	Point[] pixels;
	double[] cols;
	double big;
	double b;
	int track;
	int pix;
	int k;
}

void Painter::Run(Mat original)
{

	while(strokes < 6 && keepGoing)
	{
		d = ImageDifference(original, painting);
		if(d == null)
			System.out.println("d null!");
		//showResult(d);
		Threshold(d, threshold);
		//if(strokes%10 == 0)
		//showResult(d);
		kernel = Imgproc.getStructuringElement(Imgproc.MORPH_ELLIPSE, new Size(blob, blob));
		if(kernel == null)
			System.out.println("kernel null!");
		Imgproc.erode(d, result, kernel);
		if(result == null)
			System.out.println("result null!");
		//showResult(result);

		//result.copyTo(rCopy);
		Imgproc.findContours(result, contours, hierarchy, Imgproc.RETR_LIST, Imgproc.CHAIN_APPROX_SIMPLE);
		if(contours == null)
			System.out.println("contours null!");
		//System.out.println("contour count: " + contours.size());
		big = 0;

		biggest = null;
		for(MatOfPoint c : contours)
		{
			if((b = Imgproc.contourArea(c)) > big)
			{
				big = b;
				biggest = c;
			}
		}
		if(biggest == null)
			System.out.println("biggest null!");

		//List<MatOfPoint> bigContour = new ArrayList<MatOfPoint>();
		//bigContour.add(biggest);
		//Imgproc.drawContours(painting, bigContour, 0, new Scalar(0, 255, 0), -1);
		//showResult(result);
		//showResult(original);

		pixels = biggest.toArray();
		if(pixels == null)
			System.out.println("pixels null!");

		//System.out.println("contour: " + biggest.size());
		//System.out.println("pixels: " + pixels.length);

		track = pixels.length;
		if(track > 20)
		{
			track = track/2;

			average[0] = average[1] = average[2] = 0;
			for(pix = 0; pix < track; pix++)
			{
				cols = original.get((int)Math.round(pixels[pix].y), (int)Math.round(pixels[pix].x));
				for(k = 0; k < 3; k++)
					average[k] += cols[k];
			}
			for(k = 0; k < 3; k++)
				average[k] = average[k]/(double)track;
			Stroke(painting, pixels, track, average, blob);
		}else
		{
			System.out.println("Short contour: " + track + ", blob: " + blob);
			blob = blob*brushReduction;
			if(blob < 3)
				keepGoing = false;
		}
		strokes++;
		//if(strokes%20 == 0)
		//showResult(painting);
	}
	showResult(painting);
}




int main(int argc, char *argv[])
{
  IplImage* img = 0;
  int height,width,step,channels;
  uchar *data;
  int i,j,k;

  if(argc<2){
    printf("Usage: main <image-file-name>\n");
    exit(0);
  }

  // load an image
  img=cvLoadImage(argv[1]);

  if(!img){
    printf("Could not load image file: %s\n",argv[1]);
    exit(0);
  }

  // get the image data
  height    = img->height;
  width     = img->width;
  step      = img->widthStep;
  channels  = img->nChannels;
  data      = (uchar *)img->imageData;
  printf("Processing a %dx%d image with %d channels\n",height,width,channels);

  // create a window
  cvNamedWindow("mainWin", CV_WINDOW_AUTOSIZE);
  cvMoveWindow("mainWin", 100, 100);

  // invert the image
  for(i=0;i<height;i++) for(j=0;j<width;j++) for(k=0;k<channels;k++)
    data[i*step+j*channels+k] = ~data[i*step+j*channels+k];

  // show the image
  cvShowImage("mainWin", img );

  // wait for a key
  cvWaitKey(0);

  // release the image
  cvReleaseImage(&img );
  return 0;

}
