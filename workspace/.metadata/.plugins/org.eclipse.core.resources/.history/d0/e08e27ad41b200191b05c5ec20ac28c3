/*
 * pde.cpp
 *
 *  Created on: 26 Jul 2019
 *      Author: Adrian Bowyer
 *
 */
#include <stdio.h>
#include <math.h>
#define n 50  //dimension rows
#define m 10  //dimension columns
//#define gx(x,y) -4
int main()
{
	int i,j,k;
	float a[100][100],b[100][100],g[100][100],h,xl,xh,yl,x;
	FILE *fp;
	fp=fopen("poisson.dat","w");

	// Boundary conditions

	for(i=1;i<=n;i++)
	{
		a[i][1] = a[i][m] = 0.0;
	}
	for(j=1;j<=m;j++)
	{
		a[1][j] = 0.0;
		a[n][j] = 0.0;
	}

	a[1][m/2] = 10.0;
	a[n][m/2] = -10.0;

	// Initialise to 0

	for(i=2;i<n;i++)
		for(j=2;j<m;j++)
		{
			a[i][j] = 0.0;   //initialization ends
			b[i][j] = 0.0;
		}
	double r = 0.02;
	double rss = 1.0;

	// Gauss-Seidel iteration

	k = 0;
	while(k < 1000 && rss > 0.000001)
	{
		double sum = 0.0;
		for(i=2;i<n;i++)
		{
			for(j=2;j<m;j++)
			{
				a[i][j] = (a[i-1][j]+a[i+1][j]+a[i][j-1]+a[i][j+1])/4;
				sum = sum + (a[i][j] - b[i][j])*(a[i][j] - b[i][j]);
				b[i][j] = a[i][j];
			}
		}
		rss = sqrt(sum/( (float)n*(float)n) );
		printf("Iteration: %i, rss: %f\n", k, rss);
		k++;
	}



	for(i=1;i<=n;i++)
	{
		for(j=1;j<=m;j++)
			fprintf(fp,"%f\n",a[i][j]);
		fprintf(fp,"\n");
	}
}





