package com.reprapltd.polyhedra;

import javax.swing.*;

import com.reprapltd.polyhedra.Triangulation.Triangle;

import java.awt.*;
import java.awt.geom.*;


public class Graphics {

	public Graphics() {
		// TODO Auto-generated constructor stub
	}
	
	/**
	 * Recursive function to walk over all the triangles in one shell and output
	 * them to a .ply file.
	 * 
	 * @param out
	 */
	private static void VisitTrianglesR(Triangle tri, Triangulation triangulation, Graphics2D g2)
	{
		Path2D path = new Path2D.Double();

		int i0 = tri.GetCorner(0);
		int i1 = tri.GetCorner(1);
		int i2 = tri.GetCorner(2);
		Point3D p0 = triangulation.Corners().GetCorner(i0);
		Point3D p1 = triangulation.Corners().GetCorner(i1);
		Point3D p2 = triangulation.Corners().GetCorner(i2);

		path.moveTo(p0.x(), p0.y());
		path.lineTo(p1.x(), p1.y());
		path.lineTo(p2.x(), p2.y());
		path.closePath();
		g2.draw(path);

		// Now recursively visit my neighbours.

		tri.SetVisited();
		for(int i = 0; i < 3; i++)
		{
			if(tri.GetNeighbour(i) != null)
			{
				if(!tri.GetNeighbour(i).Visited())
					VisitTrianglesR(tri.GetNeighbour(i), triangulation, g2);
			} else
				Debug.Error("Graphics.VisitTrianglesR(): triangle with null neighbour found.", true);
		}			
	}
	
	/**
	 * Brief non-recursive function to plot all the shells by calling the recursive
	 * function above.
	 * 
	 * @param out
	 */
	private static void VisitTriangles(Triangulation triangulation, Graphics2D g2)
	{
		for(int i = 0; i < triangulation.Shells().size(); i++)
		{
			triangulation.Shells().get(i).Reset(); // Shouldn't be needed
			VisitTrianglesR(triangulation.Shells().get(i), triangulation, g2);
			triangulation.Shells().get(i).Reset();
		}
	}
	
    public static void main(String[] args) 
    {
    	final Triangulation triangulation = new Triangulation("file:///home/ensab/Desktop/rrlOwncloud/RepRapLtd/Engineering/Software/Eclipse/workspace/polyhedra/test-cube.stl");
        JFrame frame = new JFrame();
        Container pane = frame.getContentPane();
        pane.setLayout(new BorderLayout());

        // slider to control horizontal rotation
        JSlider headingSlider = new JSlider(0, 360, 180);
        pane.add(headingSlider, BorderLayout.SOUTH);

        // slider to control vertical rotation
        JSlider pitchSlider = new JSlider(SwingConstants.VERTICAL, -90, 90, 0);
        pane.add(pitchSlider, BorderLayout.EAST);

        // panel to display render results
        JPanel renderPanel = new JPanel() 
        {
        	public void paintComponent(Graphics2D g) 
        	{
        		g.setBackground(Color.BLACK);
        		g.fillRect(0, 0, getWidth(), getHeight());

        		g.translate(getWidth() / 2, getHeight() / 2);
        		g.setColor(Color.WHITE);
        		Path2D path = new Path2D.Double();
        		path.moveTo(100, 100);
        		path.lineTo(-100, 100);
        		path.lineTo(100, -100);
        		path.closePath();
        		g.draw(path);
        		//VisitTriangles(triangulation, g2);
        	}
        };
        pane.add(renderPanel, BorderLayout.CENTER);

        frame.setSize(400, 400);
        frame.setVisible(true);
    }

}



